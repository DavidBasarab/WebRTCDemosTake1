@{
    ViewBag.Title = "Caller";
}

<h2>Room</h2>

<div id="signalrid"></div>
<div>
    @*<input id="room" />*@
    <button id="join">Join</button>
</div>
<div id="videos"></div>
@*<div>
    <div id="chat">
        <div id="log"></div>
        <input id="msg" />
        <button id="send">Send</button>
    </div>
</div>*@

@section Scripts {

    <script type="text/javascript">

    var videohtml = '<div><video autoplay controls height="200" width"200" /><br/><span /></div>';

    var PeerConnection = window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
    var IceCandidate = window.mozRTCIceCandidate || window.RTCIceCandidate;
    var SessionDescription = window.mozRTCSessionDescription || window.RTCSessionDescription;

    navigator.getUserMedia = (navigator.getUserMedia ||
               navigator.webkitGetUserMedia ||
               navigator.mozGetUserMedia ||
               navigator.msGetUserMedia);

    var sdpConstraints = {
        "offerToReceiveAudio": true,
        "offerToReceiveVideo": true
    };

    var configOptions = { optional: [ { DtlsSrtpKeyAgreement: true}]};

    //Define new PeerConnection
    //var peerConnection = new PeerConnection(
    //    { iceServers: [] },
    //    { optional: [{ RtpDataChannels: true }] });

    //var dataChannel = peerConnection.createDataChannel("sendDataChannel", { reliable: false });
    //dataChannel.onmessage = function (event) {
    //    console.log("Got Data Channel Message:", event.data);
    //    $('#log').prepend(event.data);
    //};

    $(function () {

        var localMediaStream;

        //$('#send').click(function () {
        //    var msg = $('#msg').val();
        //    $('#log').prepend(msg);
        //    dataChannel.send(msg);
        //});

        if (navigator.getUserMedia) {
            navigator.getUserMedia(
                { audio: true, video: true },
                function (stream) {
                    localMediaStream = stream;

                    //var video = $(videohtml);
                    //video.attr('src', window.URL.createObjectURL(localMediaStream));
                    //video.get(0).play();

                    //$("div#videos").append(video);
                },
                function (err) { console.log(err); });
        }

        var roomHubProxy = $.connection.roomHub;
        $.connection.hub.logging = true;

        $('#join').click(function () {
            $.connection.hub.start().done(function () {
                $('#signalrid').html('Now connected, connection ID=' + $.connection.hub.id);
            });

        });

        var callerPeerConnections = {};
        var calleePeerConnections = {};


        /******** START CALLER *********************/

        //A new peer has connected so try to establish peering with them
        roomHubProxy.client.onPeerConnected = function (calleeServerConnectionId) {

            //var peerConnection = new PeerConnection(null);
            var peerConnection = new PeerConnection({ "iceServers": @Html.Raw(ViewBag.IceServers) });
            //peerConnection = new PeerConnection({
            //    iceServers: [{ url: "stun:global.stun.twilio.com:3478?transport=udp" }]
            //});
            callerPeerConnections[calleeServerConnectionId] = peerConnection;
            callerPeerConnections[calleeServerConnectionId].addStream(localMediaStream);

            //Caller found and ICE candidate and wants to tell the Callee
            // Should I wait to start doing this until after the RemoteDescription is set?
            // http://stackoverflow.com/questions/13396071/errors-when-ice-candidates-are-received-before-answer-is-sent
            callerPeerConnections[calleeServerConnectionId].onicecandidate = function (event) {
                if (event.candidate) {
                    console.log('ICE Candidate Found.  Sending to ' + calleeServerConnectionId);
                    roomHubProxy.server.callerCandidateFound(calleeServerConnectionId, JSON.stringify(event.candidate));
                }
            };

            callerPeerConnections[calleeServerConnectionId].createOffer(function (offer) {


                callerPeerConnections[calleeServerConnectionId].setLocalDescription(
                    offer,
                    function () { 
                        console.log(offer); 
                        roomHubProxy.server.makeOffer(calleeServerConnectionId, JSON.stringify(offer));
                    },
                    function (err) { console.log(err); });
                },
                function (err) { console.log(err); },
                sdpConstraints);

            callerPeerConnections[calleeServerConnectionId].oniceconnectionstatechange = function (event) {
                console.log(event);
            };

            console.log(calleeServerConnectionId);
        };

        //roomHubProxy.client.onPeerDisconnected = function (calleeServerConnectionId) {
        //    delete callerPeerConnections[calleeServerConnectionId];
        //    $('video#' + calleeServerConnectionId).remove();
        //};

        roomHubProxy.client.onAnswer = function (calleeServerConnectionId, answer) {

            callerPeerConnections[calleeServerConnectionId].onaddstream = function (event) {

                console.log("Remote Video Stream added from " + calleeServerConnectionId);

                var videocontainer = $(videohtml);
                var video = videocontainer.children("video");

                video.attr('id', calleeServerConnectionId);
                video.attr('src', window.URL.createObjectURL(event.stream));
                video.get(0).play();

                videocontainer.children("span").html(calleeServerConnectionId)
                $("div#videos").append(videocontainer);
            };

            var rtcAnswer = new SessionDescription(JSON.parse(answer));
            callerPeerConnections[calleeServerConnectionId].setRemoteDescription(
                rtcAnswer,
                function () { console.log(rtcAnswer); },
                function (err) { console.log(err); }
            );

        };

        /******** END CALLER *********************/

        /******** START CALLEE *********************/

        //Listen for offer, set remote description
        roomHubProxy.client.onOffer = function (callerServerConnectionId, offer) {

            console.info("Offer from " + callerServerConnectionId);

            //var peerConnection = new PeerConnection(null);
            var peerConnection = new PeerConnection({ "iceServers": @Html.Raw(ViewBag.IceServers) });
            //peerConnection = new PeerConnection({
            //    iceServers: [{ url: "stun:global.stun.twilio.com:3478?transport=udp" }]
            //});

            calleePeerConnections[callerServerConnectionId] = peerConnection;
            calleePeerConnections[callerServerConnectionId].addStream(localMediaStream);

            // Should I wait to start doing this until after the RemoteDescription is set?
            // http://stackoverflow.com/questions/13396071/errors-when-ice-candidates-are-received-before-answer-is-sent
            calleePeerConnections[callerServerConnectionId].onicecandidate = function (event) {
                if (event.candidate) {
                    console.log('ICE Candidate Found.  Sending to ' + callerServerConnectionId);
                    roomHubProxy.server.calleeCandidateFound(callerServerConnectionId, JSON.stringify(event.candidate));
                }
            };

            //Listen for the remote stream and set to video element
            calleePeerConnections[callerServerConnectionId].onaddstream = function (event) {

                console.log("Remote Video Stream added from " + callerServerConnectionId);

                var videocontainer = $(videohtml);
                var video = videocontainer.children("video");

                video.attr('id', callerServerConnectionId);
                video.attr('src', window.URL.createObjectURL(event.stream));
                video.get(0).play();

                videocontainer.children("span").html(callerServerConnectionId)
                $("div#videos").append(videocontainer);
            };

            calleePeerConnections[callerServerConnectionId].oniceconnectionstatechange = function (event) {
                console.log(event);
            };


            remoteDescription = new SessionDescription(JSON.parse(offer));
            calleePeerConnections[callerServerConnectionId].setRemoteDescription(
                remoteDescription,

                function () { 

                    console.info("Successfully set remote SDP for " + callerServerConnectionId);

                    //Create answer, set as local description and send to offerer
                    calleePeerConnections[callerServerConnectionId].createAnswer(function (answer) {

                        console.info("Created answer for " + callerServerConnectionId);

                        calleePeerConnections[callerServerConnectionId].setLocalDescription(
                            answer,
                            function () {
                                roomHubProxy.server.sendAnswer(callerServerConnectionId, JSON.stringify(answer));
                            },
                            function (err) {
                                console.error(callerServerConnectionId);
                                console.error(err);
                            });

                        
                    },
                    function (err) { console.log(err); });
                },

                function (err) {
                    console.log(err);
                },

                sdpConstraints);

        };

        //Caller found an ICE candidate and is telling the Callee
        roomHubProxy.client.onCallerCandidateFound = function (callerServerConnectionId, candidate) {
            
            console.log('ICE Candidate received from: ' + callerServerConnectionId);

            console.log('Peer Connection: ' + calleePeerConnections[callerServerConnectionId]);

            rtcCandidate = new IceCandidate(JSON.parse(candidate));

//            console.log('Candidate: ' + rtcCandidate);

            calleePeerConnections[callerServerConnectionId].addIceCandidate(
                rtcCandidate,
                function () {
                    console.log(rtcCandidate);
                },
                function (err) {
                    console.error(callerServerConnectionId, err);
                });
        };

        //Callee found an ICE candidate and is telling the Caller
        roomHubProxy.client.onCalleeCandidate = function (calleeServerConnectionId, candidate) {
            
            console.log('ICE Candidate received from: ' + calleeServerConnectionId);

            console.log('Peer Connection: ' + callerPeerConnections[calleeServerConnectionId]);

            rtcCandidate = new IceCandidate(JSON.parse(candidate));

            //            console.log('Candidate: ' + rtcCandidate);

            callerPeerConnections[calleeServerConnectionId].addIceCandidate(
                rtcCandidate,
                function () {
                    console.log(rtcCandidate);
                },
                function (err) {
                    console.error(calleeServerConnectionId, err);
                });
        };

        //$.connection.hub.start();
    });
</script>
}
