@{
    ViewBag.Title = "Caller";
}

<h2>Room</h2>

<div id="signalrid"></div>
<div>
    <button id="join" disabled>Join</button>
</div>
<div id="videos"></div>
@*<div>
    <div id="chat">
        <div id="log"></div>
        <input id="msg" />
        <button id="send">Send</button>
    </div>
</div>*@

@section Scripts {

    <script type="text/javascript">

    var videohtml = '<div><video autoplay controls height="200" width"200" /><br/><span /></div>';

    var PeerConnection = window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
    var IceCandidate = window.mozRTCIceCandidate || window.RTCIceCandidate;
    var SessionDescription = window.mozRTCSessionDescription || window.RTCSessionDescription;

    navigator.getUserMedia = (navigator.getUserMedia ||
               navigator.webkitGetUserMedia ||
               navigator.mozGetUserMedia ||
               navigator.msGetUserMedia);

    // Wacky constraints definition to work around 
    // differences in support in FF vs Chrome
    var sdpConstraints;
    if (typeof webkitRTCPeerConnection !== 'undefined') {
        sdpConstraints = { mandatory: {} };
        sdpConstraints.mandatory = {
            OfferToReceiveAudio: true,
            OfferToReceiveVideo: true
        };
    } else {
        sdpConstraints = {
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        };
    }

    var configOptions = { optional: [ { DtlsSrtpKeyAgreement: true}]};

    //var dataChannel = peerConnection.createDataChannel("sendDataChannel", { reliable: false });
    //dataChannel.onmessage = function (event) {
    //    console.log("Got Data Channel Message:", event.data);
    //    $('#log').prepend(event.data);
    //};

    $(function () {

        var localMediaStream;

        //$('#send').click(function () {
        //    var msg = $('#msg').val();
        //    $('#log').prepend(msg);
        //    dataChannel.send(msg);
        //});

        if (navigator.getUserMedia) {
            navigator.getUserMedia(
                { audio: true, video: true },
                function (stream) {
                    localMediaStream = stream;

                    var videocontainer = $(videohtml);
                    var video = videocontainer.children("video");

                    video.attr('id', 'video-self');
                    video.attr('src', window.URL.createObjectURL(localMediaStream));
                    video.get(0).play();

                    $("div#videos").append(videocontainer);

                    $("#join").prop('disabled', false);
                },
                function (err) { console.log(err); });
        }

        var roomHubProxy = $.connection.roomHub;
        $.connection.hub.logging = true;

        $('#join').click(function () {
            $.connection.hub.start().done(function () {
                $('#video-self').siblings('span').html($.connection.hub.id)

            });

        });

        var peerConnections = {};


        /******** START CALLER *********************/

        //A new peer has connected so try to establish peering with them
        roomHubProxy.client.onPeerConnected = function (calleeServerConnectionId) {

            var peerConnection = new PeerConnection({ "iceServers": @Html.Raw(ViewBag.IceServers) }, configOptions);

            peerConnections[calleeServerConnectionId] = peerConnection;
            peerConnections[calleeServerConnectionId].addStream(localMediaStream);

            peerConnections[calleeServerConnectionId].onicecandidate = function (event) {
                if (event.candidate) {
                    console.log('ICE Candidate Found.  Sending to ' + calleeServerConnectionId);
                    roomHubProxy.server.callerCandidateFound(calleeServerConnectionId, JSON.stringify(event.candidate));
                }
            };

            peerConnections[calleeServerConnectionId].oniceconnectionstatechange = function (event) {
                var connectionState = event.currentTarget.iceConnectionState;
                console.log(connectionState);

                if (connectionState == "disconnected") {
                    debugger;
                }
            };

            peerConnections[calleeServerConnectionId].createOffer(function (offer) {

                var localDescription = new SessionDescription(offer);
                peerConnections[calleeServerConnectionId].setLocalDescription(
                    localDescription,
                    function () { 
                        console.log(offer); 
                        roomHubProxy.server.makeOffer(calleeServerConnectionId, JSON.stringify(localDescription));
                    },
                    function (err) { console.log(err); });
                },
                function (err) { console.log(err); },
                sdpConstraints);


            console.log(calleeServerConnectionId);
        };

        //roomHubProxy.client.onPeerDisconnected = function (calleeServerConnectionId) {
        //    delete peerConnections[calleeServerConnectionId];
        //    $('video#' + calleeServerConnectionId).remove();
        //};

        roomHubProxy.client.onAnswer = function (calleeServerConnectionId, answer) {

            peerConnections[calleeServerConnectionId].onaddstream = function (event) {

                console.log("Remote Video Stream added from " + calleeServerConnectionId);

                var videocontainer = $(videohtml);
                var video = videocontainer.children("video");

                video.attr('id', calleeServerConnectionId);
                video.attr('src', window.URL.createObjectURL(event.stream));
                video.get(0).play();

                videocontainer.children("span").html(calleeServerConnectionId)
                $("div#videos").append(videocontainer);
            };

            var rtcAnswer = new SessionDescription(JSON.parse(answer));
            peerConnections[calleeServerConnectionId].setRemoteDescription(
                rtcAnswer,
                function () { console.log(rtcAnswer); },
                function (err) { console.log(err); }
            );

        };

        /******** END CALLER *********************/

        /******** START CALLEE *********************/

        //Listen for offer, set remote description
        roomHubProxy.client.onOffer = function (callerServerConnectionId, offer) {

            console.info("Offer from " + callerServerConnectionId);

            var peerConnection = new PeerConnection({ "iceServers": @Html.Raw(ViewBag.IceServers) }, configOptions);

            peerConnections[callerServerConnectionId] = peerConnection;
            peerConnections[callerServerConnectionId].addStream(localMediaStream);

            peerConnections[callerServerConnectionId].onicecandidate = function (event) {
                if (event.candidate) {
                    console.log('ICE Candidate Found.  Sending to ' + callerServerConnectionId);
                    roomHubProxy.server.calleeCandidateFound(callerServerConnectionId, JSON.stringify(event.candidate));
                }
            };

            //Listen for the remote stream and set to video element
            peerConnections[callerServerConnectionId].onaddstream = function (event) {

                console.log("Remote Video Stream added from " + callerServerConnectionId);

                var videocontainer = $(videohtml);
                var video = videocontainer.children("video");

                video.attr('id', callerServerConnectionId);
                video.attr('src', window.URL.createObjectURL(event.stream));
                video.get(0).play();

                videocontainer.children("span").html(callerServerConnectionId)
                $("div#videos").append(videocontainer);
            };

            peerConnections[callerServerConnectionId].oniceconnectionstatechange = function (event) {

                var connectionState = event.currentTarget.iceConnectionState;
                console.log(connectionState);

                if (connectionState == "disconnected") {
                    debugger;
                }
            };


            remoteDescription = new SessionDescription(JSON.parse(offer));
            peerConnections[callerServerConnectionId].setRemoteDescription(
                remoteDescription,

                function () { 

                    console.info("Successfully set remote SDP for " + callerServerConnectionId);

                    //Create answer, set as local description and send to offerer
                    peerConnections[callerServerConnectionId].createAnswer(function (answer) {

                        console.info("Created answer for " + callerServerConnectionId);

                        var localDescription = new SessionDescription(answer);
                        peerConnections[callerServerConnectionId].setLocalDescription(
                            localDescription,
                            function () {
                                roomHubProxy.server.sendAnswer(callerServerConnectionId, JSON.stringify(localDescription));
                            },
                            function (err) {
                                console.error(callerServerConnectionId);
                                console.error(err);
                            });

                        
                    },
                    function (err) { console.log(err); });
                },

                function (err) {
                    console.log(err);
                },

                sdpConstraints);

        };

        //Caller found an ICE candidate and is telling the Callee
        roomHubProxy.client.onCallerCandidateFound = function (callerServerConnectionId, candidate) {
            
            console.log('ICE Candidate received from: ' + callerServerConnectionId);
            console.log('Peer Connection: ' + peerConnections[callerServerConnectionId]);

            rtcCandidate = new IceCandidate(JSON.parse(candidate));

            peerConnections[callerServerConnectionId].addIceCandidate(
                rtcCandidate,
                function () {
                    console.log(rtcCandidate);
                },
                function (err) {
                    console.error(callerServerConnectionId, err);
                });
        };

        //Callee found an ICE candidate and is telling the Caller
        roomHubProxy.client.onCalleeCandidateFound = function (calleeServerConnectionId, candidate) {
            
            console.log('ICE Candidate received from: ' + calleeServerConnectionId);
            console.log('Peer Connection: ' + peerConnections[calleeServerConnectionId]);

            rtcCandidate = new IceCandidate(JSON.parse(candidate));

            peerConnections[calleeServerConnectionId].addIceCandidate(
                rtcCandidate,
                function () {
                    console.log(rtcCandidate);
                },
                function (err) {
                    console.error(calleeServerConnectionId, err);
                });
        };
    });
</script>
}